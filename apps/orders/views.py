from rest_framework import viewsets, mixins, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import Orders
from .serializers import OrderSerializer
from apps.users.permissions import IsCustomerPermission, IsExecutorPermission
from django.db import transaction

# üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
class CustomerOrderViewSet(viewsets.ModelViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated, IsCustomerPermission]

    def get_queryset(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã
        user_region = self.request.user.region
        return Orders.objects.filter(is_taken=False, region=user_region)

    def perform_create(self, serializer):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–∫–∞–∑
        serializer.save(created_by=self.request.user)


# üõ† –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class ExecutorOrderListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated, IsExecutorPermission]

    def get_queryset(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –µ–≥–æ —Ä–µ–≥–∏–æ–Ω–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –≤–∑—è—Ç—ã
        user_region = self.request.user.region
        return Orders.objects.filter(is_taken=False, region=user_region)


# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
class TakeOrderViewSet(viewsets.GenericViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated, IsExecutorPermission]
    queryset = Orders.objects.all()

    @action(detail=True, methods=['post'], url_path='take')
    def take_order(self, request, pk=None):
        with transaction.atomic():
            try:
                order = Orders.objects.select_for_update().get(pk=pk)
            except Orders.DoesNotExist:
                return Response({"detail": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

            if order.is_taken:
                return Response({"detail": "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç."}, status=status.HTTP_400_BAD_REQUEST)

            if not order.is_paid:
                return Response({"detail": "–í—ã –¥–æ–ª–∂–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ."}, status=status.HTTP_402_PAYMENT_REQUIRED)

            order.executor = request.user
            order.is_taken = True
            order.save()
            return Response({"detail": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç."})

    @action(detail=True, methods=['post'], url_path='pay')
    def pay_order(self, request, pk=None):
        order = self.get_object()
        user = request.user

        if order.is_paid:
            return Response({"detail": "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω."}, status=status.HTTP_400_BAD_REQUEST)

        if user.executor_balance < order.price_for_executor:
            return Response({
                "detail": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ 50 —Å–æ–º–æ–≤.",
                "your_balance": user.executor_balance
            }, status=status.HTTP_402_PAYMENT_REQUIRED)

        user.executor_balance -= order.price_for_executor
        user.save()

        order.is_paid = True
        order.save()

        return Response({
            "detail": f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {order.price_for_executor} —Å–æ–º–æ–≤. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑.",
            "remaining_balance": user.executor_balance
        }, status=status.HTTP_200_OK)
